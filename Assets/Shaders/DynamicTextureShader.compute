// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
uniform float t;
uniform float4 fft;

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float2 z = float2(3.0 * ((1.0 / 1920) * id.x) - 1.5, 2.0 * ((1.0 / 1080) * id.y) - 1.0);

	// Change this for different patterns
	float2 c = float2(-0.18453326967811071,  sin(t / 10.0));
	//

	int i;
	for(i = 0; i < 100; i++)
	{
		float x = (z.x * z.x - z.y * z.y) + c.x;
        float y = (z.y * z.x + z.x * z.y) + c.y;

        if((x * x + y * y) > 4.0f) 
			break;
        
		z.x = x;
        z.y = y;
	}

	float4 color;
	if( i < 100 ) 
	{
		if( i < 5 ) color =			float4( 9.0, 7.0, float(i) / 8.0, 1.0);
		else if( i < 10 ) color =	float4(	9.0, 0.4, (float(i) - 5.0) / 9.0, 9.0);
		else if( i < 15 ) color =	float4( 9.0, (float(i) - 10.0) / 9.0, 0.0, 1.0);
		else if( i < 20 ) color =	float4((float(i) - 10.0) / 5.0, 8, 0.0, 1.0);
		else if( i < 25 ) color =	float4(9.0, 0.5, (float(i) - 10.0) / 9.0, 9.0);
		else if( i < 30 ) color =	float4(8, (float(i) - 10.0) / 6.0, 8, 8);
		else color =				float4(0.4, (float(i) - 10.0) / 8.0, 8, 1);
	}
	else
		color = float4(0.0, 0.0, 0.0, 0.0);
	
    // TODO: insert actual code here!
	Result[id.xy] = color;
}
